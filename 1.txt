#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

#define NUM_CHILDREN 3

void handle_interrupt(int signal) {
    printf("Interrupt signal received by Child %d\n", getpid());
    exit(0);
}

int main() {
    pid_t child_pids[NUM_CHILDREN];
    int pipes[NUM_CHILDREN][2];


    for (int i = 0; i < NUM_CHILDREN; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("Pipe creation failed");
            exit(1);
        }
    }


    for (int i = 0; i < NUM_CHILDREN; i++) {
        child_pids[i] = fork();

        if (child_pids[i] == -1) {
            perror("Fork failed");
            exit(1);
        } else if (child_pids[i] == 0) {

            close(pipes[i][1]);

            signal(SIGINT, handle_interrupt);

  
            char message[100];
            read(pipes[i][0], message, sizeof(message));
            printf("Child %d received message: %s\n", getpid(), message);

            close(pipes[i][0]);
            exit(0);
        } else {
            // Parent process
            close(pipes[i][0]);
        }
    }

    for (int i = 0; i < NUM_CHILDREN; i++) {
        close(pipes[i][1]);

        
        char message[100];
        sprintf(message, "Hello Child %d", i+1);
        write(pipes[i][0], message, sizeof(message));

        close(pipes[i][0]);
    }

   
    for (int i = 0; i < NUM_CHILDREN; i++) {
        int status;
        waitpid(child_pids[i], &status, 0);
    }

    return 0;
}